#pragma  once

#include "SndaBase.h"
#include "malloc.h"
#include <tchar.h>
#include <shellapi.h>
#include "tchar.h"


// 定义收藏夹数据结构

// 收藏夹中每一个收藏记录的数据
typedef struct FavoriteLineData
{
	wchar_t	szTitle;				//	描述文本，或者为分类名称，或者为URL的title
	int32		nCatId;				// 分类ID
	int32		nParentCatId;		//	父类的ID，如果nParentCatId=0表示当前ID是目录结点
	wchar_t	szUrl;				//	收藏的URL
	int32		nAddTimes;		//	增加的时间
	int32		nLastModifyTime;	//	最近的更改时间
	int32		nClickTimes;		//	点击次数
	int32		nOrder;				//	当前结点在当前层次中的顺序

} FAVORITELINEDATA, *PFAVORITELINEDATA; 

typedef struct HistoryLineData
{
	wchar_t	    szTitle;				//	描述文本，或者为分类名称，或者为URL的title
	int32		nCatId;				// 分类ID
	int32		nParentCatId;		//	父类的ID，如果nParentCatId=0表示当前ID是目录结点
	wchar_t	    szUrl;				//	收藏的URL
	int32		nAddTimes;		//	增加的时间
	int32		nLastModifyTime;	//	最近的更改时间
	int32		nClickTimes;		//	点击次数
	int32		nOrder;				//	当前结点在当前层次中的顺序
} HISTORYLINEDATA, *PHISTORYLINEDATA; 

// 浏览器插件接口，每一个浏览器都必须实现该接口
// 上层应用程序通过该插件了解对应的浏览器的相关信息
interface IPlugIn
{
	//----------------------------------------------------------------------------------------
	//名称: Load 
	//描述: 插件的Load方法，主要用于数据等初始化 
	//返回: 初始化成功返回TRUE，初始化失败返回FALSE。
	//----------------------------------------------------------------------------------------
	virtual BOOL Load() PURE;
	//----------------------------------------------------------------------------------------
	//名称: UnLoad 
	//描述: 插件的UnLoad方法，主要用于数据等反初始化 
	//返回: 初始化成功返回TRUE，初始化失败返回FALSE。
	//----------------------------------------------------------------------------------------
	virtual BOOL UnLoad() PURE;
	//----------------------------------------------------------------------------------------
	//名称: IsWorked
	//描述: 检查该插件是否能够正常工作。如果没有安装该PlugIn对应的浏览器，则该插件不需要
	//	处理，只需要返回FALSE即可。否则它将会被调用。
	//返回: 插件的版本号，通常为一整数。
	//----------------------------------------------------------------------------------------
	virtual BOOL IsWorked() PURE;

	//----------------------------------------------------------------------------------------
	//名称: GetPluginVersion
	//描述: 获取当前插件的版本号
	//返回: 插件的版本号，通常为一整数。
	//----------------------------------------------------------------------------------------
	virtual int32 GetPluginVersion() PURE;

	//----------------------------------------------------------------------------------------
	//名称: GetBrowserName
	//描述: 获取该插件对应的浏览器的名称和版本
	//----------------------------------------------------------------------------------------
	virtual void GetSupportBrowserVersion(wchar_t** ppBrowserVersion, int& nVersionNumber) PURE;

	//----------------------------------------------------------------------------------------
	//名称: GetBrowserName
	//描述: 获取该插件对应的浏览器的名称和版本
	//----------------------------------------------------------------------------------------
	virtual const wchar_t* GetBrowserName() PURE;

	//----------------------------------------------------------------------------------------
	//名称: GetBrowserIcon
	//描述: 获取该插件对应的浏览器的图标
	//----------------------------------------------------------------------------------------
	virtual HICON GetBrowserIcon() PURE;

	//----------------------------------------------------------------------------------------
	//名称: GetInstallPath
	//描述: 获取插件对应的浏览器的安装目录
	//----------------------------------------------------------------------------------------
	virtual wchar_t* GetInstallPath() PURE;

	//----------------------------------------------------------------------------------------
	//名称: GetFavoriteDataPath
	//描述: 获取浏览器收藏夹对应的文件或者文件夹的路径
	//----------------------------------------------------------------------------------------
	virtual wchar_t* GetFavoriteDataPath() PURE;

	//----------------------------------------------------------------------------------------
	//名称: GetHistoryDataPath
	//描述: 获取浏览器收藏夹的历史数据对应的文件或者文件夹
	//----------------------------------------------------------------------------------------
	virtual wchar_t* GetHistoryDataPath() PURE;

	//----------------------------------------------------------------------------------------
	//名称: ExportFavoriteData
	//描述: 导出当前浏览器的所有的收藏夹数据
	//参数: 
	//		@param	pData			导出的收藏夹数据数组
	//		@param	nDataNum		导出的收藏夹条目的条数
	//----------------------------------------------------------------------------------------
	virtual BOOL ExportFavoriteData(PFAVORITELINEDATA pData, int32& nDataNum) PURE;

	

	//----------------------------------------------------------------------------------------
	//名称: ImportFavoriteData
	//描述: 将当前的记录导入到浏览器中
	//参数: 
	//		@param	pData			需要导入的的收藏夹数据数组
	//		@param	nDataNum		需要导入的收藏夹条目的条数
	//----------------------------------------------------------------------------------------
	virtual BOOL ImportFavoriteData(PFAVORITELINEDATA pData, int32 nDataNum) PURE;



	//----------------------------------------------------------------------------------------
	//名称: ExportHistoryData
	//描述: 导出历史浏览记录
	//参数: 
	//		@param	pData			导出的收藏夹数据数组
	//		@param	nDataNum		导出的收藏夹条目的条数
	//----------------------------------------------------------------------------------------
	virtual BOOL ExportHistoryData(PHISTORYLINEDATA pData, int32& nDataNum) PURE;



	//----------------------------------------------------------------------------------------
	//名称: ImportHistoryData
	//描述: 将历史记录记录导入到浏览器中
	//参数: 
	//		@param	pData			需要导入的的收藏夹数据数组
	//		@param	nDataNum		需要导入的收藏夹条目的条数
	//----------------------------------------------------------------------------------------
	virtual BOOL ImportHistoryData(PHISTORYLINEDATA pData, int32 nDataNum) PURE;



	//----------------------------------------------------------------------------------------
	//名称: GetHistoryCount
	//描述: 将历史记录记录导入到浏览器中
	//返回: 
	//      返回历史记录条数
	//----------------------------------------------------------------------------------------
	virtual int32 GetHistoryCount() = 0;




	//----------------------------------------------------------------------------------------
	//名称: GetFavoriteCount
	//描述: 获取浏览器中收藏网址的条数 
	//返回:
	//      回返收藏网址条数
	//----------------------------------------------------------------------------------------
	virtual int32 GetFavoriteCount() = 0;
};

typedef IPlugIn *  (*GetPlugInFunc)();
typedef void  (*ReleasePlugInFunc)(IPlugIn*);

typedef struct _PlugInInfo
{
	wchar_t		wszPlugInName[MAX_PATH];
	HMODULE	hModule;
	IPlugIn*		pPlugIn;
	GetPlugInFunc	pGetPlugInFunc;
	ReleasePlugInFunc	pReleasePlugInFunc;

}PLUGININFO, *PPLUGININFO;

class IPlugInImp : public IPlugIn
{
	//----------------------------------------------------------------------------------------
	//名称: Load 
	//描述: 插件的Load方法，主要用于数据等初始化 
	//返回: 初始化成功返回TRUE，初始化失败返回FALSE。
	//----------------------------------------------------------------------------------------
	virtual BOOL Load()
	{
		return FALSE;
	}
	//----------------------------------------------------------------------------------------
	//名称: UnLoad 
	//描述: 插件的UnLoad方法，主要用于数据等反初始化 
	//返回: 初始化成功返回TRUE，初始化失败返回FALSE。
	//----------------------------------------------------------------------------------------
	virtual BOOL UnLoad()
	{
		return FALSE;
	}
	//----------------------------------------------------------------------------------------
	//名称: IsWorked
	//描述: 检查该插件是否能够正常工作。如果没有安装该PlugIn对应的浏览器，则该插件不需要
	//	处理，只需要返回FALSE即可。否则它将会被调用。
	//返回: 插件的版本号，通常为一整数。
	//----------------------------------------------------------------------------------------
	virtual BOOL IsWorked()
	{
		return FALSE;
	}

	//----------------------------------------------------------------------------------------
	//名称: GetPluginVersion
	//描述: 获取当前插件的版本号
	//返回: 插件的版本号，通常为一整数。
	//----------------------------------------------------------------------------------------
	virtual int32 GetPluginVersion()
	{
		return 0;
	}

	//----------------------------------------------------------------------------------------
	//名称: GetBrowserName
	//描述: 获取该插件对应的浏览器的名称和版本
	//----------------------------------------------------------------------------------------
	virtual void GetSupportBrowserVersion(wchar_t** ppBrowserVersion, int& nVersionNumber) PURE;

	//----------------------------------------------------------------------------------------
	//名称: GetBrowserName
	//描述: 获取该插件对应的浏览器的名称和版本
	//----------------------------------------------------------------------------------------
	virtual const wchar_t* GetBrowserName()
	{
		return _T("");
	}

	//----------------------------------------------------------------------------------------
	//名称: GetBrowserIcon
	//描述: 获取该插件对应的浏览器的图标
	//----------------------------------------------------------------------------------------
	virtual HICON GetBrowserIcon()
	{
		wchar_t *pszBrowserPath = GetInstallPath();
		HICON    hIcon = NULL;

		if (_tcsicmp(pszBrowserPath, _T("")) == 0)
		{
			free(pszBrowserPath);
			return NULL;
		}

		hIcon = ExtractIcon(GetModuleHandle(NULL), GetInstallPath(), 0);
		free(pszBrowserPath);

		return hIcon;
	}

	//----------------------------------------------------------------------------------------
	//名称: GetInstallPath
	//描述: 获取插件对应的浏览器的安装目录
	//----------------------------------------------------------------------------------------
	virtual wchar_t* GetInstallPath()
	{
		return _T("");
	}

	//----------------------------------------------------------------------------------------
	//名称: GetFavoriteDataPath
	//描述: 获取浏览器收藏夹对应的文件或者文件夹的路径
	//----------------------------------------------------------------------------------------
	virtual wchar_t* GetFavoriteDataPath()
	{
		return _T("");
	}

	//----------------------------------------------------------------------------------------
	//名称: GetHistoryDataPath
	//描述: 获取浏览器收藏夹的历史数据对应的文件或者文件夹
	//----------------------------------------------------------------------------------------
	virtual wchar_t* GetHistoryDataPath()
	{
		return _T("");
	}

	//----------------------------------------------------------------------------------------
	//名称: ExportFavoriteData
	//描述: 导出当前浏览器的所有的收藏夹数据
	//参数: 
	//		@param	pData			导出的收藏夹数据数组
	//		@param	nDataNum		导出的收藏夹条目的条数
	//----------------------------------------------------------------------------------------
	virtual BOOL ExportFavoriteData(PFAVORITELINEDATA pData, int32& nDataNum)
	{
		return FALSE;
	}

	//----------------------------------------------------------------------------------------
	//名称: ImportFavoriteData
	//描述: 将当前的记录导入到浏览器中
	//参数: 
	//		@param	pData			需要导入的的收藏夹数据数组
	//		@param	nDataNum		需要导入的收藏夹条目的条数
	//----------------------------------------------------------------------------------------
	virtual BOOL ImportFavoriteData(PFAVORITELINEDATA pData, int32 nDataNum)
	{
		return FALSE;
	}


	//----------------------------------------------------------------------------------------
	//名称: ExportHistoryData
	//描述: 导出历史浏览记录
	//参数: 
	//		@param	pData			导出的收藏夹数据数组
	//		@param	nDataNum		导出的收藏夹条目的条数
	//----------------------------------------------------------------------------------------
	virtual BOOL ExportHistoryData(PHISTORYLINEDATA pData, int32& nDataNum)
	{
		return FALSE;
	}



	//----------------------------------------------------------------------------------------
	//名称: ImportHistoryData
	//描述: 将历史记录记录导入到浏览器中
	//参数: 
	//		@param	pData			需要导入的的收藏夹数据数组
	//		@param	nDataNum		需要导入的收藏夹条目的条数
	//----------------------------------------------------------------------------------------
	virtual BOOL ImportHistoryData(PHISTORYLINEDATA pData, int32 nDataNum)
	{
		return FALSE;
	}



	//----------------------------------------------------------------------------------------
	//名称: GetHistoryCount
	//描述: 将历史记录记录导入到浏览器中
	//返回: 
	//      返回历史记录条数
	//----------------------------------------------------------------------------------------
	virtual int32 GetHistoryCount()
	{
		return 0;
	}



	//----------------------------------------------------------------------------------------
	//名称: GetFavoriteCount
	//描述: 获取浏览器中收藏网址的条数 
	//返回:
	//      回返收藏网址条数
	//----------------------------------------------------------------------------------------
	virtual int32 GetFavoriteCount()
	{
		return 0;
	}

	

};