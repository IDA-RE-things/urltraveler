#include "XString.h"
#include "tchar.h"
#include "assert.h"

using namespace std;

String::String()
{
	m_strString = _T("");
}


String::~String()
{
}

//----------------------------------------------------------------------------------------
//描述: 根据一个字符生成字符串对象
//----------------------------------------------------------------------------------------
String::String(TCHAR ch)
{
	m_strString.push_back(ch);
}

//----------------------------------------------------------------------------------------
//名称: 拷贝构造函数
//----------------------------------------------------------------------------------------
String::String( String& src )
{
	LPCTSTR pszStr = src.GetData();
	Assign(pszStr);
}

//----------------------------------------------------------------------------------------
//名称: 默认构造函数
//描述: 根据指定的字符串，生成对象
//参数: 
//	@param	lpszSrc	源字符串
//	@param	nLen		原字符串中使用到的长度，默认为-1，表示全部被是用来进行构造
//----------------------------------------------------------------------------------------
String::String(LPCTSTR lpszSrc, int nLen)
{
	assert(lpszSrc != NULL);
	Assign(lpszSrc, nLen);
}

String::operator LPCTSTR() const 
{ 
	return (LPCTSTR)m_strString.c_str();
}

TCHAR String::operator[] (int nIndex) const
{
	return (TCHAR)m_strString.at(nIndex);
}

const String& String::operator=(const String& src)
{
	Assign(src);
	return *this;
}

const String& String::operator=(const TCHAR ch)
{
	Clear();
	m_strString.push_back(ch);
	return *this;

}

const String& String::operator=(LPCTSTR lpszStr)
{
	assert(!::IsBadStringPtr(lpszStr,-1));
	Assign(lpszStr);
	return *this;
}

//----------------------------------------------------------------------------------------
//名称: IsEmpty
//描述: 判断是否是空字符串。如果字符串为""，则为空字符串，返回true，否则返回false
//----------------------------------------------------------------------------------------
bool String::IsEmpty() const
{
	return m_strString.empty();
}

//----------------------------------------------------------------------------------------
//名称: Clear
//描述: 将字符串清空
//----------------------------------------------------------------------------------------
void String::Clear()
{
	m_strString.clear();
}

//----------------------------------------------------------------------------------------
//名称: GetLength
//描述: 返回字符串的长度
//----------------------------------------------------------------------------------------
int String::GetLength() const
{
	return (int)m_strString.size();
}

//----------------------------------------------------------------------------------------
//名称: GetAt
//描述: 返回指定位置的字符
//----------------------------------------------------------------------------------------
TCHAR String::GetAt(int nIndex) const
{
	return m_strString.at(nIndex);
}

//----------------------------------------------------------------------------------------
//名称: Append
//描述: 将给定字符串追加到现有字符串的末尾
//----------------------------------------------------------------------------------------
void String::Append(LPCTSTR pstr)
{
	m_strString.append(pstr);
}

//----------------------------------------------------------------------------------------
//名称: Assign
//描述: 将给定字符串赋值给当前字符串
//参数: 
//	@param	lpszSrc	源字符串
//	@param	nLen		原字符串中使用到的长度，默认为-1，表示全部被是用来进行构造
//----------------------------------------------------------------------------------------
void String::Assign(LPCTSTR lpszSrc, int nLength)
{
	m_strString.assign(lpszSrc, nLength);
}

//----------------------------------------------------------------------------------------
//名称: GetData
//描述: 返回字符串的原生数据指针
//----------------------------------------------------------------------------------------
LPCTSTR String::GetData()
{
	return (LPCTSTR)m_strString.c_str();
}

//----------------------------------------------------------------------------------------
//名称: ValueOf
//描述: 将给定的整数转换成字符串对象
//参数: 
//	@param	nValue	需要转换的整数
//----------------------------------------------------------------------------------------
String String::ValueOf(int nValue)
{
	TCHAR szDest[32];
	_itot( nValue, szDest, 10);
	return String(szDest);
}

//----------------------------------------------------------------------------------------
//名称: ValueOf
//描述: 将给定的整数转换成字符串对象
//参数: 
//	@param	lValue	需要转换的整数
//----------------------------------------------------------------------------------------
String String::ValueOf(long lValue)
{
	TCHAR szDest[32];
	_itot( lValue, szDest, 10);
	return String(szDest);
}

//----------------------------------------------------------------------------------------
//名称: ValueOf
//描述: 将给定的整数转换成字符串对象
//参数: 
//	@param	dwValue	需要转换的整数
//----------------------------------------------------------------------------------------
String String::ValueOf(double dwValue)
{
	return String(_T(""));
}

//----------------------------------------------------------------------------------------
//名称: ValueOf
//描述: 将给定的浮点数转换为字符串对象
//参数: 
//	@param	flValue	需要转换的整数
//----------------------------------------------------------------------------------------
String String::ValueOf(float flValue)
{
	return String(_T(""));
}

//----------------------------------------------------------------------------------------
//名称: ValueOf
//描述: 将给定的字符转换成字符串对象
//参数: 
//	@param	nValue	需要转换的字符串整数
//----------------------------------------------------------------------------------------
String String::ValueOf(char ch)
{
	return String(ch);
}

//----------------------------------------------------------------------------------------
//名称: ValueOf
//描述: 将给定的布尔变量转换成字符串对象
//参数: 
//	@param	bValue	需要转换的布尔值
//----------------------------------------------------------------------------------------
String String::ValueOf(bool bValue)
{
	if( bValue == true)
		return String(_T("1"));
	else
		return String(_T("0"));
}

