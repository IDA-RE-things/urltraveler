#ifndef __OPENUI_STRING_H_
#define __OPENUI_STRING_H_

#pragma once
#include "stdafx.h"
#include <string>

using namespace std;

class UTILITY_API String
{
public:
	//----------------------------------------------------------------------------------------
	//描述: 生成空字符串对象
	//----------------------------------------------------------------------------------------
	String();

	//----------------------------------------------------------------------------------------
	//描述: 根据一个字符生成字符串对象
	//----------------------------------------------------------------------------------------
	String(TCHAR ch);

	//----------------------------------------------------------------------------------------
	//描述: 生成的默认的颜色值为黑色
	//----------------------------------------------------------------------------------------
	String(String& src );

	//----------------------------------------------------------------------------------------
	//描述: 根据指定的字符串，生成对象
	//参数: 
	//	@param	lpszSrc	源字符串
	//	@param	nLen		原字符串中使用到的长度，默认为-1，表示全部被是用来进行构造
	//----------------------------------------------------------------------------------------
	String(LPCTSTR lpszSrc, int nLen = -1);

	virtual ~String();

	//----------------------------------------------------------------------------------------
	//名称: 运算符重载接口
	//----------------------------------------------------------------------------------------
	operator LPCTSTR() const;
	TCHAR operator[] (int nIndex) const;

	const String& operator=(const String& src);
	const String& operator=(const TCHAR ch);
	const String& operator=(LPCTSTR lpszStr);

	//----------------------------------------------------------------------------------------
	//名称: 属性接口
	//----------------------------------------------------------------------------------------

	//----------------------------------------------------------------------------------------
	//名称: IsEmpty
	//描述: 判断是否是空字符串。如果字符串为""，则为空字符串，返回true，否则返回false
	//----------------------------------------------------------------------------------------
	bool IsEmpty() const;

	//----------------------------------------------------------------------------------------
	//名称: Clear
	//描述: 将字符串清空
	//----------------------------------------------------------------------------------------
	void Clear();

	//----------------------------------------------------------------------------------------
	//名称: GetLength
	//描述: 返回字符串的长度
	//----------------------------------------------------------------------------------------
	int GetLength() const;

	//----------------------------------------------------------------------------------------
	//名称: GetAt
	//描述: 返回指定位置的字符
	//----------------------------------------------------------------------------------------
	TCHAR GetAt(int nIndex) const;

	//----------------------------------------------------------------------------------------
	//名称: Append
	//描述: 将给定字符串追加到现有字符串的末尾
	//----------------------------------------------------------------------------------------
	void Append(LPCTSTR pstr);

	//----------------------------------------------------------------------------------------
	//名称: Assign
	//描述: 将给定字符串赋值给当前字符串
	//参数: 
	//	@param	lpszSrc	源字符串
	//	@param	nLen		原字符串中使用到的长度，默认为-1，表示全部被是用来进行构造
	//----------------------------------------------------------------------------------------
	void Assign(LPCTSTR lpszSrc, int nLength = -1);

	//----------------------------------------------------------------------------------------
	//名称: GetData
	//描述: 返回字符串的原生数据指针
	//----------------------------------------------------------------------------------------
	LPCTSTR GetData();

	//----------------------------------------------------------------------------------------
	//名称: 静态转换接口
	//----------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------
	//名称: ValueOf
	//描述: 将给定的整数转换成字符串对象
	//参数: 
	//	@param	nValue	需要转换的整数
	//----------------------------------------------------------------------------------------
	static String ValueOf(int nValue);

	//----------------------------------------------------------------------------------------
	//名称: ValueOf
	//描述: 将给定的整数转换成字符串对象
	//参数: 
	//	@param	lValue	需要转换的整数
	//----------------------------------------------------------------------------------------
	static String ValueOf(long lValue);

	//----------------------------------------------------------------------------------------
	//名称: ValueOf
	//描述: 将给定的整数转换成字符串对象
	//参数: 
	//	@param	dwValue	需要转换的整数
	//----------------------------------------------------------------------------------------
	static String ValueOf(double dwValue);

	//----------------------------------------------------------------------------------------
	//名称: ValueOf
	//描述: 将给定的浮点数转换为字符串对象
	//参数: 
	//	@param	flValue	需要转换的浮点数
	//----------------------------------------------------------------------------------------
	static String ValueOf(float flValue);

	//----------------------------------------------------------------------------------------
	//名称: ValueOf
	//描述: 将给定的字符转换成字符串对象。该接口使用的时候必须将参数进行强制转换为char，比如
	//	   String::ValueOf((char)(L'c'))，而不是String::ValueOf(L'c')。对于后者，系统会将L'c'视为整
	//	   数，从而调用到String::ValueOf(int nValue)接口
	//参数: 
	//	@param	ch	需要转换的字符
	//----------------------------------------------------------------------------------------
	static String ValueOf(char ch);

	//----------------------------------------------------------------------------------------
	//名称: ValueOf
	//描述: 将给定的布尔变量转换成字符串对象
	//参数: 
	//	@param	bValue	需要转换的布尔值，为 true和false。true的话将转换为1，false则
	//	转换为0
	//----------------------------------------------------------------------------------------
	static String ValueOf(bool bValue);



private:

#ifndef _UNICODE
	std::string	m_strString;
#else
	std::wstring m_strString;
#endif
};

#endif